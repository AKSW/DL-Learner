/**
 * Father Example
 *
 * possible solution: 
 *   male AND EXISTS hasChild.TOP
 *
 * Copyright (C) 2007, Jens Lehmann
 */

// declare some prefixes to use as abbreviations
prefixes = [ ("kb","http://example.com/father#") ]
rendering = "dlsyntax"

// knowledge source definition
ks.type = "OWL File"
ks.fileName = "father.owl"

// reasoner
reasoner.type = "closed world reasoner"
reasoner.sources = { ks }

// learning problem
lp.type = "parcelPosNegLP"
lp.positiveExamples = {"kb:martin","kb:markus","kb:stefan"}
lp.negativeExamples = {"kb:heinz","kb:anna","kb:michelle"}

// create a refinement operator and configure it
//op.type = "rho"
//op.useCardinalityRestrictions = true


// create learning algorithm to run
alg.type = "parcel"
alg.maxExecutionTimeInSeconds = 15
alg.useMinimizer=true