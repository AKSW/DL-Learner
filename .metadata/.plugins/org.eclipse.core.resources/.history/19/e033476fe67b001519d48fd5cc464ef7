package org.dllearner.experiments;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.jena.riot.Lang;
import org.dllearner.algorithms.qtl.datastructures.impl.RDFResourceTree;
import org.dllearner.algorithms.qtl.datastructures.impl.RDFResourceTree.Rendering;
import org.dllearner.algorithms.qtl.impl.QueryTreeFactory;
import org.dllearner.algorithms.qtl.impl.QueryTreeFactoryBase;
import org.dllearner.cli.CLI;
import org.dllearner.configuration.IConfiguration;
import org.dllearner.configuration.spring.ApplicationContextBuilder;
import org.dllearner.configuration.spring.DefaultApplicationContextBuilder;
import org.dllearner.confparser.ConfParserConfiguration;
import org.dllearner.core.AbstractClassExpressionLearningProblem;
import org.dllearner.core.KnowledgeSource;
import org.dllearner.kb.OWLAPIOntology;
import org.dllearner.kb.OWLFile;
import org.dllearner.learningproblems.PosNegLP;
import org.dllearner.utilities.OWLAPIUtils;
import org.dllearner.utilities.OwlApiJenaUtils;
import org.semanticweb.owlapi.model.OWLIndividual;
import org.semanticweb.owlapi.model.OWLOntology;
import org.springframework.context.ApplicationContext;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;

import com.google.common.base.Charsets;
import com.google.common.base.Charsets;
import com.google.common.io.Files;
import com.google.common.io.Files;
import com.hp.hpl.jena.graph.NodeFactory;
import com.hp.hpl.jena.ontology.DatatypeProperty;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntModelSpec;
import com.hp.hpl.jena.ontology.OntResource;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.rdf.model.Statement;
import com.hp.hpl.jena.vocabulary.XSD;
import java.io.File;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

// files used to convert new Conf files

public class ConfTree {
//	private static String fileName="../test/breasttissue/train1.conf";
//	private static String owlFilename="../test/breasttissue/breasttissue.owl";
//	private static String treeFilename= "../Dtree/breasttissue.txt";
	
//	private static String fileName="../test/cardiotocography/train1.conf";
//	private static String owlFilename="../test/cardiotocography/cardiotocography.owl";
//	private static String treeFilename= "../Dtree/cardiotocography.txt";
//	private static String replaceURI= "http://dl-learner.org/cardiotocography#";
	
//		
//	private static String conffileName="../examples/mutagenesis/train2.conf";
//	private static String owlFilename="../examples/mutagenesis/prolog/mutagenesis.owl";
//	private static String treeFilename= "../Dtree/mutagenesistrain.txt";
//	private static String replaceURI= "http://dl-learner.org/mutagenesis#";
	
	
	private static String conffileName="../examples/carcinogenesis/tenfold.conf";
	private static String owlFilename="../examples/carcinogenesis/carcinogenesis.owl";
	private static String treeFilename= "../Dtree/carcinogenesis-tenfold.txt";
	private static String replaceURI= "http://dl-learner.org/carcinogenesis#";
	
	//private static String URI="http://www.example.org/lymphography#Target2_Metastases";
	//private static String URI="http://www.example.org/lymphography#Target1_NormalFind";
	//private static String URI="http://www.example.org/lymphography#Target4_Fibrosis";
	private static boolean positive;
	private static String URI="";
	private static String FormatTree(String tree)
	{
		//getclass();
		String temptree= tree.replace(replaceURI, "");
		temptree= temptree.replace("rdf:", "");
		temptree= temptree.replace("rdfs:", "");
		temptree= temptree.replace("owl:", "");
		temptree= temptree.replace("xsd:", "");
		temptree= temptree.replace(">", "");
		temptree= temptree.replace("<", "");
		temptree= temptree.replace("^^double", "(isDouble)");
		temptree= temptree.replace("\"", "");
		//temptree= temptree.replace("^^double", "(isDouble)");
		return temptree;
	}
	public static void readfile() throws Exception
	{
		


		
	}
	public static void main(String[] args) throws Exception {
		
		File confFile= new File(conffileName);
		CLI cl = new CLI(confFile);
		cl.init();
		
		// read Owl file 
		KnowledgeSource ks = cl.getKnowledgeSource();
		OntModel model = ModelFactory.createOntologyModel(OntModelSpec.OWL_MEM);
				
		if(ks instanceof OWLFile) {
			model.read(new FileInputStream(((OWLFile) ks).getURL().getPath()), null, Lang.RDFXML.getLabel());
		} else {
			throw new Exception("No ontology file.");
		}
		
		
		QueryTreeFactory factory = new QueryTreeFactoryBase();
		
	
		for(DatatypeProperty p : model.listDatatypeProperties().toList()){
			OntResource range = p.getRange();
			if(range.equals(XSD.xdouble)) {
//				List<RDFNode> values = model.listObjectsOfProperty(p).toList();
				List<Statement> statements = model.listStatements(null, p, (RDFNode)null).toList();
				
				double min =0, max=0,tot=0, avg=0;
				System.out.println(p);
				for (Statement st : statements) {
					RDFNode value = st.getObject();
					
					double v = value.asLiteral().getDouble();
					if( min > v){
						min = v;
					}
					if( max < v){
						max = v;
					} 
					
					tot=tot+v;
					//System.out.println(v);
				}
				avg=tot/statements.size();
				System.out.println("Min::"+min+" Max::"+max+" Sum"+tot+" Average"+avg+" Total"+statements.size());
				// Low = min -(min + avg)/2, medium = (min + avg)/2  - (max + avg)/2 , high = (max + avg)/2 - max
				String temp ="";
				// re-iterate to put the values
				
				List<Statement> toAdd = new ArrayList<>();
				for (Iterator<Statement> iter = model.listStatements(null, p, (RDFNode)null); iter.hasNext();) {
					Statement st = iter.next();
					
					RDFNode value = st.getObject();
					
					double v = value.asLiteral().getDouble();
					if( v <= ((min + avg)/2)){
						// put Low value in model with URI p
						temp = "Low";
						
					}else
					if( ( v > ((min + avg)/2)) && (v < ((max + avg)/2) ) ) {
						// put Medium value in model with URI p
						temp = "Medium";
					} else
					if( (v >= ((max + avg)/2) ) ) {
						// put High value in model with URI p
						temp = "High";
					}
					
					iter.remove();
					toAdd.add(model.createStatement(st.getSubject(), p, model.asRDFNode(NodeFactory.createLiteral(temp))));
					System.out.println(v+"  "+temp);
				}
				model.add(toAdd);
			}
		}
		AbstractClassExpressionLearningProblem lp = cl.getLearningProblem();
		if(lp instanceof PosNegLP) {
			Set<OWLIndividual> positiveExamples = ((PosNegLP) lp).getPositiveExamples();
			Set<OWLIndividual> negativeExamples = ((PosNegLP) lp).getNegativeExamples();
//			try(PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(treeFilename, false)))) {
				
			
			for (OWLIndividual posEx : positiveExamples) {
//				String uri = posEx.toStringID();
//				System.out.println(uri);
				for (int fold = 0; fold < 10; fold++){
				List<String> lines = Files.readLines(new File("../Dtree/Folds/carcinogenesis-fold-test-pos"+fold+".txt"), Charsets.UTF_8);
				PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("../Dtree/Folds/Tree-carcinogenesis-fold-test-pos"+fold, false)));

				for(int row = 0; row < lines.size(); row++) { // for each row
				String uri = lines.get(row);
				
				// call tree here and print
				RDFResourceTree tree = factory.getQueryTree(uri, model);
				String treeString = tree.getStringRepresentation(Rendering.BRACES);
				String formatedTree=FormatTree(treeString);
					out.println("positive");
					out.print(formatedTree);
					out.println("\n\n\n");
				
				}//end rows uris
			out.close();
			
				 lines = Files.readLines(new File("../Dtree/Folds/carcinogenesis-fold-test-neg"+fold+".txt"), Charsets.UTF_8);
				 out = new PrintWriter(new BufferedWriter(new FileWriter("../Dtree/Folds/Tree-carcinogenesis-fold-test-neg"+fold, false)));
				for(int row = 0; row < lines.size(); row++) { // for each row
					String uri = lines.get(row);
					
					// call tree here and print
					RDFResourceTree tree = factory.getQueryTree(uri, model);
					String treeString = tree.getStringRepresentation(Rendering.BRACES);
					String formatedTree=FormatTree(treeString);
						out.println("negative");
						out.print(formatedTree);
						out.println("\n\n\n");
					
					}//end rows uris
				out.close();
				
				 lines = Files.readLines(new File("../Dtree/Folds/carcinogenesis-fold-train-pos"+fold+".txt"), Charsets.UTF_8);
				 out = new PrintWriter(new BufferedWriter(new FileWriter("../Dtree/Folds/Tree-carcinogenesis-fold-train-pos"+fold, false)));

				for(int row = 0; row < lines.size(); row++) { // for each row
				String uri = lines.get(row);
				
				// call tree here and print
				RDFResourceTree tree = factory.getQueryTree(uri, model);
				String treeString = tree.getStringRepresentation(Rendering.BRACES);
				String formatedTree=FormatTree(treeString);
					out.println("positive");
					out.print(formatedTree);
					out.println("\n\n\n");
				
				}//end rows uris
			out.close();
			
				 lines = Files.readLines(new File("../Dtree/Folds/carcinogenesis-fold-train-neg"+fold+".txt"), Charsets.UTF_8);
				 out = new PrintWriter(new BufferedWriter(new FileWriter("../Dtree/Folds/Tree-carcinogenesis-fold-train-neg"+fold, false)));
				for(int row = 0; row < lines.size(); row++) { // for each row
					String uri = lines.get(row);
					
					// call tree here and print
					RDFResourceTree tree = factory.getQueryTree(uri, model);
					String treeString = tree.getStringRepresentation(Rendering.BRACES);
					String formatedTree=FormatTree(treeString);
						out.println("negative");
						out.print(formatedTree);
						out.println("\n\n\n");
					
					}//end rows uris
				out.close();
				
				
				
				}//end folds
//			for (OWLIndividual negEx : negativeExamples) {
//				String uri = negEx.toStringID();
//				System.out.println(uri);
//				// call tree here and print
//				RDFResourceTree tree = factory.getQueryTree(uri, model);
//				String treeString = tree.getStringRepresentation(Rendering.BRACES);
//				String formatedTree=FormatTree(treeString);
//					out.println("negative");
//					out.print(formatedTree);
//					out.println("\n\n\n");
//				
//			}
		}
			}
		}
}

	


